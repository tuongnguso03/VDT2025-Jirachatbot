from google import genai
from google.genai import types as genai_types
from .utils.function_declaration import GeminiFunction
import os
from dotenv import load_dotenv
from typing import List, Dict

from modules.confluence.confluence_doc import get_page_by_id_v2, get_all_page_ids_and_titles_v2
from modules.jira.jira_task import get_all_issues, get_today_issues, get_issue_detail, get_worklogs, log_work, create_issue, assign_issue, transition_issue, get_comments, add_comment, edit_comment, add_attachment

import json
import requests
import mimetypes
import re
# Only run this block for Gemini Developer API
load_dotenv()

class ChatAgent:
    """
    The chat agent class. Handle everything chat. Or that sort.
    """
    client = genai.Client(api_key=os.getenv('GEMINI_API_KEY'))
    model = "gemini-1.5-flash"
    config = {"temperature": 0}
    
    def __init__(self, user_id: str, access_token: str, cloud_id: str, domain: str):
        self.user_id = user_id
        self.access_token = access_token
        self.cloud_id = cloud_id
        self.domain = domain
        self.functions = [
            self.get_jira_issues, 
            self.get_jira_issues_today,
            self.get_jira_issue_detail,
            self.get_jira_log_works,
            self.create_jira_log_work,
            self.create_jira_issue,
            self.assign_jira_issue,
            self.transition_jira_issue,
            self.get_jira_comments,
            self.create_jira_comment,
            self.edit_jira_comment,
            self.get_confluence_page_info,
            self.get_confluence_page_list]

    def get_jira_issues(self):
        """
        L·∫•y ra danh s√°ch tasks (c√¥ng vi·ªác) c·ªßa ng∆∞·ªùi d√πng
        
        H√†m n√†y tr·∫£ v·ªÅ th√¥ng tin danh s√°ch tasks (c√¥ng vi·ªác) c·ªßa ng∆∞·ªùi d√πng ƒë√≥.

        Tr·∫£ v·ªÅ:
            M·ªôt list chu·ªói ch·ª©a th√¥ng tin danh s√°ch tasks ƒë∆∞·ª£c y√™u c·∫ßu.
        """
        result = get_all_issues(self.access_token, self.cloud_id)

        if not result:
            return "üéâ B·∫°n kh√¥ng c√≥ c√¥ng vi·ªác n√†o ƒëang x·ª≠ l√Ω!"

        formatted = "üìã Danh s√°ch c√¥ng vi·ªác ƒëang x·ª≠ l√Ω:\n\n"

        for idx, issue in enumerate(result, start=1):
            key = issue.get("key", "N/A")
            summary = issue.get("summary", "Kh√¥ng c√≥ ti√™u ƒë·ªÅ")
            type = issue.get("type", "N/A")
            status = issue.get("status", "Kh√¥ng r√µ tr·∫°ng th√°i")
            deadline = issue.get("deadline", "Ch∆∞a c√≥ h·∫°n")

            formatted += (
                f"{idx}. *{key}* - {summary}\n"
                f"    - Lo·∫°i: {type}\n"
                f"    - Tr·∫°ng th√°i: `{status}`\n"
                f"    - Deadline: {deadline}\n\n"
            )

        return formatted

    def get_jira_issues_today(self):
        """
        L·∫•y ra danh s√°ch tasks (c√¥ng vi·ªác) c·ªßa ng∆∞·ªùi d√πng ng√†y h√¥m nay.
        
        H√†m n√†y tr·∫£ v·ªÅ th√¥ng tin danh s√°ch tasks (c√¥ng vi·ªác) c·ªßa ng∆∞·ªùi d√πng ƒë√≥ ng√†y h√¥m nay.

        Tr·∫£ v·ªÅ:
            M·ªôt list chu·ªói ch·ª©a th√¥ng tin danh s√°ch tasks ƒë∆∞·ª£c y√™u c·∫ßu.
        """
        result = get_today_issues(self.access_token, self.cloud_id)

        if not result:
            return "üéâ B·∫°n kh√¥ng c√≥ c√¥ng vi·ªác n√†o ƒëang x·ª≠ l√Ω!"

        formatted = "üìã Danh s√°ch c√¥ng vi·ªác ƒëang x·ª≠ l√Ω:\n\n"

        for idx, issue in enumerate(result, start=1):
            key = issue.get("key", "N/A")
            summary = issue.get("summary", "Kh√¥ng c√≥ ti√™u ƒë·ªÅ")
            type = issue.get("type", "N/A")
            status = issue.get("status", "Kh√¥ng r√µ tr·∫°ng th√°i")
            deadline = issue.get("deadline", "Ch∆∞a c√≥ h·∫°n")

            formatted += (
                f"{idx}. *{key}* - {summary}\n"
                f"    - Lo·∫°i: {type}\n"
                f"    - Tr·∫°ng th√°i: `{status}`\n"
                f"    - Deadline: {deadline}\n\n"
            )

        return formatted

    def get_jira_issue_detail(self, issue_key: str):
        """
        L·∫•y ra chi ti·∫øt c·ªßa m·ªôt task t·ª´ issue_key
        
        H√†m n√†y nh·∫≠n v√†o key c·ªßa m·ªôt issue trong Jira v√† tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt c·ªßa issue ƒë√≥.

        Tham s·ªë:
            issue_key (str): key c·ªßa issue c·∫ßn l·∫•y th√¥ng tin. C√≥ th·ªÉ bao g·ªìm c·∫£ ch·ªØ v√† s·ªë.
            
        Tr·∫£ v·ªÅ dict g·ªìm: th√¥ng tin m√¥ t·∫£ issue d·∫°ng chu·ªói
        """
        result = get_issue_detail(self.access_token, self.cloud_id, issue_key)

        
        attachment_urls = [att.get("content_url") for att in result.get("attachments", []) if att.get("content_url")]

        formatted = (
            f"- D·ª± √°n: {result.get('project', '')}\n"
            f"- Jira Issue: {result.get('key', '')}\n"
            f"- T√≥m t·∫Øt: {result.get('summary', '')}\n"
            f"- M√¥ t·∫£: {result.get('description', '')}\n"
            f"- Lo·∫°i: {result.get('type', '')}\n"
            f"- Deadline: {result.get('duedate', 'Kh√¥ng c√≥')}\n"
            f"- Tr·∫°ng th√°i: {result.get('status', '')}\n"
            f"- Ng∆∞·ªùi th·ª±c hi·ªán: {result.get('assignee', 'Ch∆∞a g√°n')}\n"
            f"- Ng∆∞·ªùi t·∫°o: {result.get('reporter', '')}\n"
            f"- M·ª©c ƒë·ªô ∆∞u ti√™n: {result.get('priority', '')}\n"
        )

        if attachment_urls:
            formatted += f"- Attachments: {json.dumps(attachment_urls)}\n"

        return formatted
            
    
    def get_jira_log_works(self, issue_key: str):
        """
        L·∫•y ra danh s√°ch worklog c·ªßa m·ªôt task t·ª´ issue_key

        H√†m n√†y nh·∫≠n v√†o key c·ªßa m·ªôt issue trong Jira v√† tr·∫£ v·ªÅ danh s√°ch worklog cho issue ƒë√≥.

        Tham s·ªë:
            issue_key (str): key c·ªßa issue c·∫ßn l·∫•y th√¥ng tin. C√≥ th·ªÉ bao g·ªìm c·∫£ ch·ªØ v√† s·ªë.

        Tr·∫£ v·ªÅ:
            M·ªôt chu·ªói ch·ª©a th√¥ng tin worklog.
        """
        result = get_worklogs(self.access_token, self.cloud_id, issue_key)
        formatted = "üìã Danh s√°ch c√¥ng vi·ªác ƒëang x·ª≠ l√Ω:\n\n"

        for idx, issue in enumerate(result, start=1):
            id = issue.get("id", "N/A")
            author = issue.get("author", "N/A")
            time_spent = issue.get("time_spent", "N/A")
            started = issue.get("started", "N/A")
            comment = issue.get("comment", "Kh√¥ng c√≥ comment")

            formatted += (
                f"- WorklogID: {id}\n"
                f"- Ng∆∞·ªùi log work: {author}\n"
                f"- Th·ªùi gian l√†m vi·ªác: {time_spent}\n"
                f"- Th·ªùi gian b·∫Øt ƒë·∫ßu l√†m: {started}\n"
                f"- Comment: {comment}\n"
            )

        return formatted

    def create_jira_log_work(self, issue_key: str, time_spend: int, comment: str, date: str):
        """
        Log work cho m·ªôt task t·ª´ issue_key, time_spend, comment, date

        H√†m n√†y nh·∫≠n v√†o key c·ªßa m·ªôt issue trong Jira, ng√†y, th·ªùi gian l√†m vi·ªác v√† b√¨nh lu·∫≠n, v√† tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt c·ªßa log work cho issue ƒë√≥.

        Tham s·ªë:
            issue_key (str): key c·ªßa issue c·∫ßn l·∫•y th√¥ng tin. C√≥ th·ªÉ bao g·ªìm c·∫£ ch·ªØ v√† s·ªë.
            date (str): Ng√†y log work, ƒë·ªãnh d·∫°ng linh ho·∫°t (YYYY-MM-DD HH:MM, ho·∫∑c ch·ªâ HH:MM ho·∫∑c r·ªóng).
            time_spend (int): Th·ªùi gian l√†m vi·ªác - l√†m trong bao nhi√™u ph√∫t.
            comment (str): B√¨nh lu·∫≠n cho log work.

        Tr·∫£ v·ªÅ:
            M·ªôt chu·ªói ch·ª©a th√¥ng tin worklog sau khi log work.
        """
        result = log_work(self.access_token, self.cloud_id, issue_key, time_spend, comment, date)

        formatted = (
            f"- Jira Issue: {result.get('issue_key', '')}\n"
            f"- WorklogID: {result.get('id', '')}\n"
            f"- Ng∆∞·ªùi log work: {result.get('author', '')}\n"
            f"- Th·ªùi gian l√†m vi·ªác: {result.get('time_spend', '')}\n"
            f"- Th·ªùi gian b·∫Øt ƒë·∫ßu l√†m: {result.get('started', '')}\n"
            f"- Comment: {result.get('comment', 'Kh√¥ng c√≥')}\n"
        ) 

        return formatted
    
    def create_jira_issue(self, project_key: str, summary: str, description: str, issue_type: str, due_date: str, assignee_displayname: str):
        """
        T·∫°o m·ªõi (task) issue t·ª´ project_key, summary, description, issue_type, assignee_displayname, due_date

        H√†m n√†y nh·∫≠n v√†o key c·ªßa m·ªôt project trong Jira, ng√†y, t√≥m t·∫Øt, m√¥ t·∫£, lo·∫°i issue, ng√†y ƒë·∫øn h·∫°n, displayname c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c giao task.

        Tham s·ªë:
            project_key (str): Key c·ªßa project mu·ªën t·∫°o issue m·ªõi. C√≥ th·ªÉ bao g·ªìm c·∫£ ch·ªØ v√† s·ªë.
            summary (str): T√≥m t·∫Øt issue.
            description (str): M√¥ t·∫£ issue.
            issue_type (str): Lo·∫°i issue, kh√¥ng n√≥i g√¨ m·∫∑c ƒë·ªãnh l√† Task.
            due_date (str): Ng√†y ƒë·∫øn h·∫°n deadline, c√≥ th·ªÉ r·ªóng.
            assignee_displayname (str): T√™n c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c giao (ƒë·∫£m nhi·ªám) task n√†y, c√≥ th·ªÉ r·ªóng.

        Tr·∫£ v·ªÅ:
            M·ªôt chu·ªói ch·ª©a th√¥ng tin task sau khi t·∫°o task.
        """
        result = create_issue(self.access_token, self.cloud_id, self.domain, project_key, summary, description, issue_type, due_date, assignee_displayname)

        formatted = (
            f"- Project Key: {project_key}\n"
            f"- Issue Id: {result.get('issue_id', '')}\n"
            f"- Issue Key: {result.get('issue_key', '')}\n"
            f"- Link Issue: {result.get('issue_url', '')}\n"
            f"- T√≥m t·∫Øt: {result.get('summary', '')}\n"
            f"- M√¥ t·∫£: {result.get('description', '')}\n"
            f"- Lo·∫°i: {result.get('issue_type', '')}\n"
            f"- Ng√†y ƒë·∫øn h·∫°n: {result.get('due_date', 'N/A')}\n"
            f"- AssigneeId: {result.get('assignee_id', 'Kh√¥ng c√≥')}\n"
            f"- Ng∆∞·ªùi ƒë·∫£m nhi·ªám: {result.get('assignee_displayname', 'Kh√¥ng c√≥')}\n"
        ) 

        return formatted

    def assign_jira_issue(self, issue_key: str, assignee_displayname: str):
        """
        Giao task cho user t·ª´ issue_key, assignee_displayname

        H√†m n√†y nh·∫≠n v√†o key c·ªßa m·ªôt issue trong Jira c√πng displayname c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c giao task.

        Tham s·ªë:
            issue_key (str): Key c·ªßa issue mu·ªën giao task. C√≥ th·ªÉ bao g·ªìm c·∫£ ch·ªØ v√† s·ªë.
            assignee_displayname (str): T√™n c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c giao (ƒë·∫£m nhi·ªám) task n√†y.

        Tr·∫£ v·ªÅ:
            M·ªôt chu·ªói ch·ª©a th√¥ng tin sau khi giao task.
        """
        result = assign_issue(self.access_token, self.cloud_id, issue_key, assignee_displayname)

        formatted = (
            f"- Project Key: {result.get('project_key', '')}\n"
            f"- Issue Key: {result.get('issue_key', '')}\n"
            f"- T√≥m t·∫Øt: {result.get('summary', '')}\n"
            f"- M√¥ t·∫£: {result.get('description', '')}\n"
            f"- Lo·∫°i: {result.get('issue_type', '')}\n"
            f"- Ng√†y ƒë·∫øn h·∫°n: {result.get('due_date', 'N/A')}\n"
            f"- AssigneeId: {result.get('assignee_id', 'Kh√¥ng c√≥')}\n"
            f"- Ng∆∞·ªùi ƒë·∫£m nhi·ªám: {result.get('assignee_displayname', 'Kh√¥ng c√≥')}\n"
        ) 

        return formatted

    def transition_jira_issue(self, issue_key: str, transition_name: str):
        """
        Chuy·ªÉn tr·∫°ng th√°i cho task v·ªõi issue_key sang transition_name

        H√†m n√†y nh·∫≠n v√†o key c·ªßa m·ªôt issue trong Jira c√πng transition_name c·ªßa task.

        Tham s·ªë:
            issue_key (str): Key c·ªßa issue mu·ªën giao task. C√≥ th·ªÉ bao g·ªìm c·∫£ ch·ªØ v√† s·ªë.
            transition_name (str): T√™n c·ªßa tr·∫°ng th√°i task.

        Tr·∫£ v·ªÅ:
            M·ªôt chu·ªói ch·ª©a th√¥ng tin sau khi chuy·ªÉn tr·∫°ng th√°i task.
        """
        result = transition_issue(self.access_token, self.cloud_id, issue_key, transition_name)

        formatted = (
            f"- Issue Key: {result.get('issue_key', '')}\n"
            f"- Tr·∫°ng th√°i: {result.get('status', '')}\n"
            f"- T√≥m t·∫Øt: {result.get('summary', '')}\n"
            f"- Ng∆∞·ªùi ƒë·∫£m nhi·ªám: {result.get('assignee', 'Kh√¥ng c√≥')}\n"
        ) 

        return formatted

    def get_jira_comments(self, issue_key: str):
        """
        L·∫•y danh s√°ch c√°c b√¨nh lu·∫≠n (comments) c·ªßa task v·ªõi issue_key

        H√†m n√†y nh·∫≠n v√†o key c·ªßa m·ªôt issue trong Jira.

        Tham s·ªë:
            issue_key (str): Key c·ªßa issue mu·ªën l·∫•y comments. C√≥ th·ªÉ bao g·ªìm c·∫£ ch·ªØ v√† s·ªë.

        Tr·∫£ v·ªÅ:
            M·ªôt chu·ªói ch·ª©a th√¥ng tin sau khi l·∫•y danh s√°ch comments.
        """
        result = get_comments(self.access_token, self.cloud_id, issue_key)
        formatted = ""

        for idx, issue in enumerate(result, start=1):
            id = issue.get("id")
            author = issue.get("author")
            body = issue.get("body")
            created = issue.get("created")
            updated = issue.get("updated")

            formatted += (
                f"{idx}. *{id}* - {body}\n"
                f"    - Ng∆∞·ªùi t·∫°o: {author}\n"
                f"    - T·∫°o l√∫c: `{created}`\n"
                f"    - Ch·ªânh s·ª≠a l√∫c: {updated}\n\n"
            )

        return formatted
    
    def create_jira_comment(self, issue_key: str, comment: str):
        """
        T·∫°o b√¨nh lu·∫≠n (comment) m·ªõi c·ªßa task t·ª´ issue_key v√† comment

        H√†m n√†y nh·∫≠n v√†o key c·ªßa m·ªôt issue trong Jira v√† comment cho issue ƒë√≥.

        Tham s·ªë:
            issue_key (str): Key c·ªßa issue mu·ªën comment. C√≥ th·ªÉ bao g·ªìm c·∫£ ch·ªØ v√† s·ªë.
            comment (str): N·ªôi dung b√¨nh lu·∫≠n (comment)

        Tr·∫£ v·ªÅ:
            M·ªôt chu·ªói ch·ª©a th√¥ng tin sau khi t·∫°o comment cho issue.
        """
        result = add_comment(self.access_token, self.cloud_id, issue_key, comment)

        formatted = (
            f"- Issue Key: {result.get('issue_key', '')}\n"
            f"- Comment ID: {result.get('comment_id', '')}\n"
            f"- N·ªôi dung: {result.get('comment', '')}\n"
        ) 

        return formatted
    
    def edit_jira_comment(self, issue_key: str, comment_id: int, new_comment: str):
        """
        Ch·ªânh s·ª≠a b√¨nh lu·∫≠n (comment) - comment_id c·ªßa task issue_key v·ªõi n·ªôi dung m·ªõi new_comment

        H√†m n√†y nh·∫≠n v√†o key c·ªßa m·ªôt issue trong Jira, comment_id v√† comment cho issue ƒë√≥.

        Tham s·ªë:
            issue_key (str): Key c·ªßa issue mu·ªën comment. C√≥ th·ªÉ bao g·ªìm c·∫£ ch·ªØ v√† s·ªë.
            comment_id (int): Comment id mu·ªën ch·ªânh s·ª≠a
            new_comment (str): N·ªôi dung comment m·ªõi

        Tr·∫£ v·ªÅ:
            M·ªôt chu·ªói ch·ª©a th√¥ng tin sau khi ch·ªânh s·ª≠a comment.
        """
        result = edit_comment(self.access_token, self.cloud_id, issue_key, comment_id, new_comment)

        formatted = (
            f"- Issue Key: {result.get('issue_key', '')}\n"
            f"- Comment ID: {result.get('comment_id', '')}\n"
            f"- N·ªôi dung: {result.get('new_comment', '')}\n"
        ) 

        return formatted

    def attach_file_to_jira_issue(self, message: str) -> str:
        """
        ƒê√≠nh k√®m file v√†o Jira issue (t√¨m issue key t·ª´ message)

        Args:
            message (str): Tin nh·∫Øn ch·ª©a issue key (VD: "vui l√≤ng ƒë√≠nh k√®m file v√†o VDT-123")

        Returns:
            str: N·ªôi dung ph·∫£n h·ªìi ng∆∞·ªùi d√πng
        """
        file_path = getattr(self, "file_path", None)
        file_name = getattr(self, "file_name", "file")

        if not file_path:
            return "Kh√¥ng t√¨m th·∫•y file ƒë·ªÉ ƒë√≠nh k√®m."

        match = re.search(r"[A-Z]+-\d+", message)
        if not match:
            return "Kh√¥ng t√¨m th·∫•y m√£ issue trong tin nh·∫Øn."

        issue_key = match.group(0)

        try:
            return add_attachment(self.access_token, self.cloud_id, issue_key, file_path, file_name)
        except Exception as e:
            return f"G·∫∑p l·ªói khi ƒë√≠nh k√®m file: {str(e)}"

        
    
    def get_confluence_page_info(self, page_id: str):
        """
        L·∫•y ra chi ti·∫øt th√¥ng tin c·ªßa m·ªôt Confluence Page t·ª´ page_id, c√≥ ch·ª©a n·ªôi dung ƒë·∫ßy ƒë·ªß. B√™n trong n·ªôi dung c√°c page s·∫Ω ch·ª©a c√°c t√†i li·ªáu c·∫ßn thi·∫øt cho c√¥ng vi·ªác.
        
        Args:
            page_id (str): ID c·ªßa page c·∫ßn l·∫•y th√¥ng tin. M·ªôt danh s√°ch c√°c page (t√™n, k√®m ID) c√≥ th·ªÉ l·∫•y ƒë∆∞·ª£c t·ª´ h√†m get_confluence_page_list.

        Returns:
             M·ªôt chu·ªói ch·ª©a th√¥ng tin chi ti·∫øt, bao g·ªìm n·ªôi dung c·ªßa page ƒë∆∞·ª£c y√™u c·∫ßu.
        """
        return str(get_page_by_id_v2(self.access_token, self.cloud_id, page_id))
    
    def get_confluence_page_list(self):
        """
        L·∫•y ra ID v√† t√™n c·ªßa c√°c page ch·ª©a n·ªôi dung t√†i li·ªáu c√≥ th·ªÉ truy c·∫≠p ƒë∆∞·ª£c trong Confluence. ID c·∫ßn thi·∫øt ƒë·ªÉ s·ª≠ d·ª•ng get_confluence_page_info s·∫Ω n·∫±m ·ªü ƒë√¢y.
        """
        return str(get_all_page_ids_and_titles_v2(self.access_token, self.cloud_id))

    def reformat_chat_history( 
            raw_chat_history: List[Dict[str, str]]
        ) -> List[genai_types.Content]:
        """
        Parses a list of dictionaries into a list of Gemini API Content objects.

        This function takes a chat history in a simple dictionary format and
        converts it into a list of `genai.types.Content` objects, mapping
        the 'bot' role to 'model' for Gemini API compatibility.

        Args:
            raw_ chat_history: A list of dictionaries, where each dictionary must have
                        a "role" (either "user" or "bot") and a "message" key.

        Returns:
            A list of `genai.types.Content` objects ready for the Gemini API.
            Returns an empty list if google.generativeai is not available
            or if input is malformed.
        """
        gemini_history = []

        for message in raw_chat_history:
            role = message.get("role")
            text = message.get("message")

            if not role or not text:
                print(f"Skipping invalid message (missing role or message): {message}")
                continue

            # Map 'bot' role to 'model'
            if role.lower() == "bot":
                gemini_role = "model"
            elif role.lower() == "user":
                gemini_role = "user"
            else:
                print(f"Skipping message with unknown role '{role}': {message}")
                continue

            # Create the Content and Part objects
            gemini_history.append(genai_types.Content(
                role=gemini_role,
                parts=[genai_types.Part(text=text)],
            ))

        return gemini_history

    def chat_function(self, new_message, 
                            chat_history: list = None, 
                            functions: list[GeminiFunction, callable] = None, 
                            config: dict = config):
        """
        Initiates or continues a chat with the Gemini model, supporting function calling.

        It prepares the tools based on the provided GeminiFunction objects and sends
        the new message to the model. If no chat object is provided, it starts a
        new chat, potentially using the provided history.

        Args:
            new_message (str): The new message/prompt to send to the model.
            chat_history (list, optional): A list of previous messages to initialize the chat with,
                                        if `chat_object` is None. Defaults to None.
            functions (list[GeminiFunction], optional): A list of `GeminiFunction` objects
                                                        representing the available tools/functions
                                                        for the model to call. Defaults to None.

        Returns:
            tuple: A tuple containing:
                - chat_object (Chat): The (potentially new) chat object with the updated history.
                - chat_history (list): The complete, updated chat history from the chat object.
        """
        if functions:
            # Prepare the tools from the GeminiFunction objects
            config.update({
                "tools": [
                    f.get_tool() if isinstance(f, GeminiFunction) else f
                    for f in functions
                    if isinstance(f, GeminiFunction) or callable(f)
                ]
            })
        else: 
            # Prepare the tools from the GeminiFunction objects
            config.update({
                "tools": [
                    f.get_tool() if isinstance(f, GeminiFunction) else f
                    for f in self.functions
                    if isinstance(f, GeminiFunction) or callable(f)
                ]
            })
        
        if chat_history and type(chat_history[0]) != genai_types.Content:
            chat_history = ChatAgent.reformat_chat_history(chat_history)

        chat_object = ChatAgent.client.chats.create(model = ChatAgent.model,
                                history = chat_history) #placeholder
        
        response = chat_object.send_message(new_message, config = config)
        print("LOG:", chat_object._curated_history)
        return response, chat_object._curated_history


if __name__ == "__main__":
    chat_agent = ChatAgent(user_id="1021777")
    
    raw_chat_history = [
        {
            "role": "user",
            "message": "hihi"
        },
        {
            "role": "bot",
            "message": "API Gemini hi·ªán ch∆∞a s·∫µn s√†ng, vui l√≤ng th·ª≠ l·∫°i sau."
        },
        {
            "role": "user",
            "message": "ok nha"
        },
        {
            "role": "bot",
            "message": "API Gemini hi·ªán ch∆∞a s·∫µn s√†ng, vui l√≤ng th·ª≠ l·∫°i sau."
        },
    ]
    
    response, chat_history = chat_agent.chat_function("Jira issue 1111-1P nh·∫Øc ƒë·∫øn m√£ g√¨ ·∫•y nh·ªâ", 
                                                      chat_history=raw_chat_history, 
                                                      functions=[
                                                          chat_agent.get_confluence_page_info, 
                                                          chat_agent.get_jira_issue_detail
                                                      ])
    print(response.candidates[0].content.parts[0].text)
    # print("###################################")
    # print(chat_history)
    print("###################################")
    response, chat_history = chat_agent.chat_function("C√≥", 
                                                      chat_history=chat_history, 
                                                      functions=[
                                                          chat_agent.get_confluence_page_info, 
                                                          chat_agent.get_jira_issue_detail
                                                      ])
    print(response.candidates[0].content.parts[0].text)
    print("###################################")
    # print(chat_history)
    
    
    
    
    