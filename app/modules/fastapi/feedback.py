from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
import asyncio
import logging
from telegram import Bot
from database import SessionLocal
from models import User
from modules.fastapi.config import BOT_TOKEN

bot = Bot(token=BOT_TOKEN)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def send_feedback_prompt():
    logger.info(f"[{datetime.now()}] Sending feedback prompts...")

    db = SessionLocal()
    try:
        users = db.query(User).filter(User.telegramId.isnot(None)).all()
        for user in users:
            try:
                await bot.send_message(
                    chat_id=user.telegramId,
                    text="üì£  KH·∫¢O S√ÅT ƒê·ªäNH K·ª≤\n\nB·∫°n ƒë√°nh gi√° tr·∫£i nghi·ªám s·ª≠ d·ª•ng chatbot nh∆∞ th·∫ø n√†o?\nB·∫°n c√≥ g√≥p √Ω g√¨ cho h·ªá th·ªëng kh√¥ng?\nVui l√≤ng tr·∫£ l·ªùi tin nh·∫Øn n√†y ƒë·ªÉ ch√∫ng t√¥i c·∫£i thi·ªán d·ªãch v·ª•. ü•∞"
                )
                user.awaitingFeedback = True
                db.commit()
            except Exception as e:
                logger.exception(f"Error sending feedback prompt to user {user.userId}")
    finally:
        db.close()

def start_feedback_scheduler():
    scheduler = BackgroundScheduler(timezone="Asia/Ho_Chi_Minh")
    scheduler.add_job(lambda: asyncio.run(send_feedback_prompt()), 'cron', day=1, hour=9, minute=0)
    scheduler.start()
    logger.info("Feedback scheduler started")
