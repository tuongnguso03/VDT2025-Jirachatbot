from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import telegram.helpers
from models import User, Message, Feedback
from database import SessionLocal
from modules.fastapi.config import get_jira_auth_url, BOT_TOKEN
import json
import asyncio
from modules.chatbot.chatbot import ChatAgent
import logging
import traceback
import requests
import os
import tempfile
import aiohttp
import re
from datetime import datetime

bot = Bot(token=BOT_TOKEN)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_chat.id
    session = SessionLocal()
    user = session.query(User).filter_by(telegramId=telegram_id).first()
    if not user:
        user = User(telegramId=telegram_id)
        session.add(user)
        session.commit()

    jira_link = get_jira_auth_url(telegram_id)
    welcome_msg = (
        f"üëã Ch√†o b·∫°n {update.effective_user.first_name}!\n\n"
        f"ƒê·ªÉ b·∫Øt ƒë·∫ßu, h√£y ƒëƒÉng nh·∫≠p Jira t·∫°i link sau:\n"
        f"[Nh·∫•n ƒë·ªÉ ƒëƒÉng nh·∫≠p Jira]({jira_link})"
    )

    keyboard = [['L·∫•y ra danh s√°ch c√°c tasks!', 'L·∫•y ra danh s√°ch tasks h√¥m nay!']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(welcome_msg, parse_mode='Markdown', disable_web_page_preview=True, reply_markup=reply_markup)

    session.close()


async def download_and_send_jira_image(update, jira_url, headers=None):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(jira_url, headers=headers) as resp:
                if resp.status == 200:
                    data = await resp.read()
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp_file:
                        tmp_file.write(data)
                        tmp_file_path = tmp_file.name

                    with open(tmp_file_path, "rb") as photo_file:
                        await update.message.reply_photo(photo=photo_file, caption="·∫¢nh t·ª´ Jira")

                    os.remove(tmp_file_path)
                else:
                    await update.message.reply_text(f"Kh√¥ng t·∫£i ƒë∆∞·ª£c ·∫£nh t·ª´ Jira, status {resp.status}")
    except Exception as e:
        await update.message.reply_text(f"L·ªói khi t·∫£i ·∫£nh t·ª´ Jira: {str(e)}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_chat.id
    user_text = update.message.text
    session = SessionLocal()

    try:
        user = session.query(User).filter_by(telegramId=telegram_id).first()

        if user.awaitingFeedback:
            feedback = Feedback(
                userId=user.userId,
                content=user_text,
                createdAt=datetime.now()
            )
            session.add(feedback)

            user.awaitingFeedback = False
            session.commit()

            await update.message.reply_text("‚úÖ  C·∫£m ∆°n b·∫°n ƒë√£ g√≥p √Ω!")
            return

        if user:
            recent_messages = (
                session.query(Message)
                .filter_by(userId=user.userId)
                .order_by(Message.timestamp.desc(), Message.messageId.desc())
                .limit(10)
                .all()
            )

            recent_messages.reverse()

            formatted_conversation = [
                {"role": msg.role, "message": msg.message} for msg in recent_messages
            ]

            agent = ChatAgent(
                user_id=user.userId,
                access_token=user.accessToken,
                cloud_id=user.cloudId,
                domain=user.domain
            )

            # formatted_conversation = ""

            loop = asyncio.get_event_loop()
            response, chat_history = await loop.run_in_executor(
                None, lambda: agent.chat_function(user_text, chat_history=formatted_conversation)
            )

            if not response.candidates[0].content.parts:
                print("BUG:", response)
            
            reply_text = ("\n".join([part.text for part in response.candidates[0].content.parts]))[:4095]

            attachments_urls = []
            match = re.search(r'Attachments:\s*(\[[\s\S]*?\])', reply_text)
            if match:
                try:
                    attachments_urls = json.loads(match.group(1))
                except json.JSONDecodeError:
                    pass

            def remove_attachments_section(text: str) -> str:
                return re.sub(r'\n?-?- Attachments:\s*\[.*?\]', '', text, flags=re.DOTALL)

            reply_text = remove_attachments_section(reply_text)

            msg_user = Message(userId=user.userId, role="user", message=user_text)
            msg_bot = Message(userId=user.userId, role="bot", message=reply_text)
            session.add_all([msg_user, msg_bot])
            session.commit()
            
            # safe_text = telegram.helpers.escape_markdown(reply_text, version=2)
            # await update.message.reply_text(safe_text, parse_mode="MarkdownV2")
            
            def escape_markdown(text):
                markdown_special_chars = r"\`*_{}[]()#+-.!|>"
                for char in markdown_special_chars:
                    text = text.replace(char, f"\\{char}")
                return text

            def format_markdown_text(text):
                code_blocks = []
                def replace_code_block(match):
                    code_blocks.append(match.group(0))
                    return f"[[CODE_BLOCK_{len(code_blocks)-1}]]"

                text_wo_code = re.sub(r"```.*?```", replace_code_block, text, flags=re.DOTALL)

                escaped_text = escape_markdown(text_wo_code)

                for i, block in enumerate(code_blocks):
                    escaped_text = escaped_text.replace(f"\\[\\[CODE\\_BLOCK\\_{i}\\]\\]", block)  

                return escaped_text
        
            formatted = format_markdown_text(reply_text)

            def reply_text_contains_markdown(text):
                markdown_special_chars = r"```\\"
                return any(char in text for char in markdown_special_chars)

            if reply_text_contains_markdown(reply_text):
                await update.message.reply_text(formatted, parse_mode="MarkdownV2")
            else:
                await update.message.reply_text(reply_text)

            for url in attachments_urls:
                headers = {"Authorization": f"Bearer {user.accessToken}"} 
                await download_and_send_jira_image(update, url, headers=headers)

    except Exception as e:
        logger.error(f"Error in handle_message: {e}")
        logger.error(traceback.format_exc())
        await update.message.reply_text("Chat bot hi·ªán kh√¥ng kh·∫£ d·ª•ng, vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t!")
    finally:
        session.close()

def send_telegram_message(chat_id: str, text: str):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "Markdown"
    }
    response = requests.post(url, json=payload)

    if not response.ok:
        print(f"Telegram error: {response.text}")
        return

    session = SessionLocal()
    try:
        user = session.query(User).filter_by(telegramId=chat_id).first()
        if user:
            msg_user = Message(userId=user.userId, role="user", message="Nh·∫Øc vi·ªác t·ª´ h·ªá th·ªëng")
            msg_bot = Message(userId=user.userId, role="bot", message=text)
            session.add_all([msg_user, msg_bot])
            session.commit()
    except Exception as e:
        logger.error(f"Error saving bot message: {e}")
    finally:
        session.close()

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_chat.id
    session = SessionLocal()

    try:
        user = session.query(User).filter_by(telegramId=telegram_id).first()
        if not user or not user.accessToken or not user.cloudId:
            await update.message.reply_text("‚ùóÔ∏èB·∫°n ch∆∞a k·∫øt n·ªëi v·ªõi Jira. G√µ /start ƒë·ªÉ k·∫øt n·ªëi.")
            return

        caption = update.message.caption or ""

        previous_msg = (
            session.query(Message)
            .filter_by(userId=user.userId, role="user")
            .order_by(Message.timestamp.desc(), Message.messageId.desc())
            .first()
        )
        if not caption and not previous_msg:
            await update.message.reply_text("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ng·ªØ c·∫£nh ƒë·ªÉ x·ª≠ l√Ω file.")
            return

        file = update.message.document or update.message.photo[-1]
        telegram_file = await context.bot.get_file(file.file_id)

        import tempfile, os
        with tempfile.NamedTemporaryFile(delete=False) as temp_file:
            await telegram_file.download_to_drive(temp_file.name)
            file_path = temp_file.name
            file_name = getattr(file, 'file_name', 'attachment.png')

        agent = ChatAgent(
            user_id=user.userId,
            access_token=user.accessToken,
            cloud_id=user.cloudId,
            domain=user.domain
        )

        agent.file_path = file_path
        agent.file_name = file_name

        message_to_process = caption if caption else previous_msg.message

        loop = asyncio.get_event_loop()
        response, _ = await loop.run_in_executor(
            None, lambda: agent.chat_function(
                message_to_process,
                chat_history=[],
                functions=[agent.attach_file_to_jira_issue],
            )
        )

        reply_text = response.candidates[0].content.parts[0].text

        msg_user = Message(
            userId=user.userId,
            role="user",
            message=caption if caption else f"File g·ª≠i: {file_name}"
        )
        msg_bot = Message(userId=user.userId, role="bot", message=reply_text)
        session.add_all([msg_user, msg_bot])
        session.commit()

        await update.message.reply_text(reply_text)

    except Exception as e:
        logger.error(f"L·ªói x·ª≠ l√Ω file Gemini: {e}")
        logger.error(traceback.format_exc())
        await update.message.reply_text("‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω file.")
    finally:
        session.close()
        if 'file_path' in locals() and os.path.exists(file_path):
            os.remove(file_path)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìò *H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Bot Jira*\n\n"
        "*M·ªôt s·ªë prompt b·∫°n c√≥ th·ªÉ th·ª≠:*\n"
        "- `L·∫•y ra danh s√°ch c√°c tasks`\n"
        "- `L·∫•y ra danh s√°ch tasks h√¥m nay`\n"
        "- `L·∫•y th√¥ng tin chi ti·∫øt task <Issue Key>`\n"
        "- `L·∫•y ra danh s√°ch worklog task <Issue Key>`\n"
        "- `Log work cho t√¥i task <Issue Key> b·∫Øt ƒë·∫ßu t·ª´ <HH:MM> h√¥m nay, l√†m trong <MM> ph√∫t v√† n·ªôi dung l√† <Content>`\n"
        "- `T·∫°o m·ªõi task v·ªõi project key: <Project Key>, summary: <Summary>, description: <Description>, issue type: <Issue Type>, Deadline: <DD/mm/YYYY>, giao cho <Name> ƒë·∫£m nhi·ªám, priority: <Priority>`\n"
        "- `Giao task <Issue Key> cho <Name> ƒë·∫£m nhi·ªám`\n"
        "- `Chuy·ªÉn tr·∫°ng th√°i task <Issue Key> sang <Transition Name>`\n"
        "- `L·∫•y danh s√°ch c√°c b√¨nh lu·∫≠n c·ªßa task <Issue Key>`\n"
        "- `T·∫°o b√¨nh lu·∫≠n m·ªõi cho task <Issue Key> v·ªõi n·ªôi dung <Content>`\n"
        "- `Ch·ªânh s·ª≠a b√¨nh lu·∫≠n ID 10001 c·ªßa task <Issue Key> n·ªôi dung <Content>`\n"
        "- `ƒê√≠nh k√®m file v√†o task <Issue Key>`\n"
        "- `L·∫•y ra ID v√† t√™n c·ªßa c√°c page ch·ª©a n·ªôi dung t√†i li·ªáu c√≥ th·ªÉ truy c·∫≠p ƒë∆∞·ª£c trong Confluence c·ªßa task <Issue Key>`\n"
        "- `L·∫•y ra th√¥ng tin chi ti·∫øt c·ªßa <Document> <Document ID>`\n\n"
        "*L·ªánh h·ªó tr·ª£:*\n"
        "/start - ƒêƒÉng nh·∫≠p Jira\n"
        "/help - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng\n"
        "/feedback - H√≤m th∆∞ g√≥p √Ω"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def feedback_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_telegram_id = update.effective_user.id
    try:
        await bot.send_message(
            chat_id=user_telegram_id,
            text="üì£  KH·∫¢O S√ÅT ƒê·ªäNH K·ª≤\n\nB·∫°n ƒë√°nh gi√° tr·∫£i nghi·ªám s·ª≠ d·ª•ng chatbot nh∆∞ th·∫ø n√†o?\nB·∫°n c√≥ g√≥p √Ω g√¨ cho h·ªá th·ªëng kh√¥ng?\nVui l√≤ng tr·∫£ l·ªùi tin nh·∫Øn n√†y ƒë·ªÉ ch√∫ng t√¥i c·∫£i thi·ªán d·ªãch v·ª•. ü•∞"
        )
        db = SessionLocal()
        user = db.query(User).filter(User.telegramId == user_telegram_id).first()
        if user:
            user.awaitingFeedback = True
            db.commit()
        db.close()
    except Exception as e:
        logger.exception(f"Error sending feedback prompt to user {user_telegram_id}")
